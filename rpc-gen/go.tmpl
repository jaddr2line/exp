package {{.GoPackage}}

import (
    "bytes"
    "bufio"
    "context"
    "encoding/json"
    "errors"
    "fmt"
    "io"
    "io/ioutil"
    "net/http"
    "net/url"
    "sync"
)

var _ = bytes.NewReader
var _ = sync.NewCond
var _ = bufio.NewWriter
var _ = io.Pipe

{{range (lines .Description) -}}
// {{.}}
{{end -}}
type {{.Name}} interface {
    {{- range .Operations}}
        {{range (lines .Description) -}}
        // {{.}}
        {{end -}}

        {{- range .Inputs -}}
            {{- range (lines .Description) -}}
            // {{.}}
            {{end}}
        {{- end -}}
        {{- range .Outputs -}}
            {{- range (lines .Description) -}}
            // {{.}}
            {{end}}
        {{- end -}}

        {{- if (ne (len .Errors) 0) -}}
            // May return{{range .Errors}} {{.}}{{end}}.
        {{end -}}

        {{.Name}}(ctx context.Context,
                {{- if instream . -}}
                    {{(index .Inputs 0).Name}} {{if req (index .Inputs 0).Type (bytestream) -}}
                        io.Reader
                    {{- else -}}
                        func() ({{(index .Inputs 0).Type.Elem}}, error)
                    {{- end}},
                {{- else -}}
                    {{- range .Inputs -}}
                        {{.Name}} {{.Type.GoType}},
                    {{- end -}}
                {{end -}}
                {{- if outstream . -}}
                    {{(index .Outputs 0).Name}} {{if req (index .Outputs 0).Type (bytestream) -}}
                        io.Writer
                    {{- else -}}
                        func({{(index .Outputs 0).Type.Elem}}) error
                    {{- end}},
                {{- end -}}
            )
            {{- if and (not (outstream .)) (ne (len .Outputs) 0) -}}
                (
                    {{- range .Outputs -}}
                        {{.Name}} {{.Type.GoType}},
                    {{- end -}}
                err error)
            {{- else -}}
                error
            {{- end -}}
    {{end}}
}

{{range .Types}}
    {{range (lines .Description) -}}
    // {{.}}
    {{end -}}
    type {{.Name}} {{.Type.GoType}}
{{end}}

{{range .Errors}}
    {{range (lines .Description) -}}
    // {{.}}
    {{end -}}
    // This corresponds to the HTTP status code {{.Code}} "{{httpcode .Code}}".
    type {{.Name}} struct {
        {{- if (ne (len .Fields) 0)}}
            {{- range .Fields}}
                {{range (lines .Description) -}}
                // {{.}}
                {{end -}}

                {{.Name}} {{.Type.GoType}} `json:"{{.Name}},omitempty"`
            {{end}}
        {{end -}}
    }
{{end}}

{{range .Errors}}
    func (err {{.Name}}) Error() string {
        {{- if (ne (len .Fields) 0)}}
            dat, merr := json.Marshal(err)
            if merr != nil {
                return {{printf "%q" .Text}}
            }

            return fmt.Sprintf("%s (%s)", {{printf "%q" .Text}}, string(dat[1:len(dat)-1]))
        {{- else}}
            return {{printf "%q" .Text}}
        {{- end}}
    }
{{end}}

// rpcError is a container used to transmit errors across http.
type rpcError struct {
    Message string `json:"message"`
    Type string `json:"type,omitempty"`
    Data interface{} `json:"dat,omitempty"`
    Code int `json:"-"`
}

func (re rpcError) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    msg := re.Message
    if dat, err := json.Marshal(re); err == nil {
        msg = string(dat)
    }
    http.Error(w, msg, re.Code)
}

{{range .Errors}}
    // ServeHTTP sends the error over HTTP.
    func (err {{.Name}}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        rpcError{
            Message: err.Error(),
            Type: {{printf "%q" .Name}},
            Data: err,
            Code: {{gohttpstatus .Code}},
        }.ServeHTTP(w, r)
    }
{{end}}

// http{{.Name}}Handler is a wrapper around {{.Name}} that implements http.Handler.
type http{{.Name}}Handler struct {
    impl {{.Name}}
    ctxTransform func(context.Context, *http.Request) (context.Context, context.CancelFunc, error)
    mux *http.ServeMux
}

type trackWriter struct {
    wrote bool
    w io.Writer
}

func (tw *trackWriter) Write(p []byte) (int, error) {
    tw.wrote = true
    return tw.w.Write(p)
}

{{$sysName := .Name}}
{{range $i, $op := .Operations}}
    // handle{{$op.Name}} wraps the implementation's {{$op.Name}} operation and bridges it to HTTP.
    func (h http{{$sysName}}Handler) handle{{$op.Name}}(w http.ResponseWriter, r *http.Request) {
        if r.Method != {{gohttpmethod $op.Method}} {
            rpcError{
                Message: fmt.Sprintf("unsupported method %q, please use %q", r.Method,{{gohttpmethod $op.Method}}),
                Code: http.StatusMethodNotAllowed,
            }.ServeHTTP(w, r)
            return
        }

        {{if not (instream $op)}}
            var args struct {
                {{- range $op.Inputs}}
                    {{.Name}} {{.Type.GoType}} `json:"{{.Name}},omitempty"`
                {{- end -}}
            }

            {{if (eq $op.ArgEncoding "json")}}
                if err := json.NewDecoder(r.Body).Decode(&args); err != nil {
                    rpcError{
                        Message: err.Error(),
                        Code: http.StatusBadRequest,
                    }.ServeHTTP(w, r)
                    return
                }
            {{else if (eq $op.ArgEncoding "query")}}
                q := r.URL.Query()
                {{range $op.Inputs -}}
                    switch len(q[{{printf "%q" .Name}}]) {
                    case 0:
                    case 1:
                        if err := json.Unmarshal([]byte(q[{{printf "%q" .Name}}][0]), &args.{{.Name}}); err != nil {
                            rpcError{
                                Message: err.Error(),
                                Code: http.StatusBadRequest,
                            }.ServeHTTP(w, r)
                            return
                        }
                    default:
                        rpcError{
                            Message: "argument \"{{.Name}}\" duplicated",
                            Code: http.StatusBadRequest,
                        }.ServeHTTP(w, r)
                        return
                    }
                {{end}}
            {{else}}
                {{/* no arguments */}}
            {{end}}
        {{end}}

        ctx := r.Context()
        ctx, cancel := context.WithCancel(ctx)
        defer cancel()
        if h.ctxTransform != nil {
            tctx, tcancel, err := h.ctxTransform(ctx, r)
            if err != nil {
                rpcError{
                    Message: err.Error(),
                    Code: http.StatusBadRequest,
                }.ServeHTTP(w, r)
                return
            }
            defer tcancel()
            ctx = tctx
        }

        {{if not (outstream $op)}}
            var outputs struct {
                {{- range $op.Outputs}}
                    {{.Name}} {{.Type.GoType}} `json:"{{.Name}},omitempty"`
                {{- end}}
            }
        {{end}}

        {{if instream $op}}
            {{if rne (index $op.Inputs 0).Type (bytestream)}}
                firstRead := true
                ijd := json.NewDecoder(r.Body)
                inRead := func() ({{(index $op.Inputs 0).Type.Elem}}, error) {
                    // read opening bracket
                    if firstRead {
                        brack, err := ijd.Token()
                        firstRead = false
                        if err != nil {
                            return {{gozero (index $op.Inputs 0).Type.Elem}}, err
                        }
                        if brack != json.Delim('[') {
                            return {{gozero (index $op.Inputs 0).Type.Elem}}, fmt.Errorf("expected '[' opening stream JSON but got %q (%T)", brack, brack)
                        }
                    }

                    // handle end of stream
                    if !ijd.More() {
                        // read closing token
                        brack, err := ijd.Token()
                        if err != nil {
                            if err == io.EOF {
                                err = io.ErrUnexpectedEOF
                            }
                            return {{gozero (index $op.Inputs 0).Type.Elem}}, err
                        }
                        if brack != json.Delim(']') {
                            return {{gozero (index $op.Inputs 0).Type.Elem}}, fmt.Errorf("expected ']' closing stream JSON but got %q (%T)", brack, brack)
                        }

                        return {{gozero (index $op.Inputs 0).Type.Elem}}, io.EOF
                    }

                    // read JSON element
                    var elem {{(index $op.Inputs 0).Type.Elem}}
                    if err := ijd.Decode(&elem); err != nil {
                        return {{gozero (index $op.Inputs 0).Type.Elem}}, err
                    }
                    return elem, nil
                }
            {{end}}
        {{end}}

        {{- if (outstream $op) -}}
            {{- if rne (index $op.Outputs 0).Type (bytestream) -}}
                bufw := bufio.NewWriter(w)
                oje := json.NewEncoder(bufw)
                firstWrite := true
                startWrite := func() error {
                    return bufw.WriteByte('[')
                }
                outWrite := func(elem {{(index .Outputs 0).Type.Elem}}) error {
                    if firstWrite {
                        firstWrite = false
                        if err := startWrite(); err != nil {
                            return err
                        }
                    } else {
                        bufw.WriteByte(',')
                    }
                    return oje.Encode(elem)
                }
                endWrite := func() error {
                    if firstWrite {
                        if err := startWrite(); err != nil {
                            return err
                        }
                    }
                    bufw.WriteByte(']')
                    return bufw.Flush()
                }
            {{- else -}}
                tw := &trackWriter{w: w}
            {{- end -}}
        {{end}}

        var err error
        {{if not (outstream $op) -}}
            {{range $op.Outputs}}outputs.{{.Name}}, {{end}}
        {{- end -}}err = h.impl.{{$op.Name}}(ctx
            {{- if not (instream $op) -}}
                {{range $op.Inputs}}, args.{{.Name}}{{end}}
            {{- else -}}
                {{- if rne (index $op.Inputs 0).Type (bytestream) -}}
                    , inRead
                {{- else -}}
                    , r.Body
                {{- end -}}
            {{- end}}
            {{- if outstream $op -}}
                {{- if rne (index $op.Outputs 0).Type (bytestream) -}}
                    , outWrite
                {{- else -}}
                    , tw
                {{- end -}}
            {{end -}}
        )
        if err != nil {
            {{- if (outstream $op) -}}
                {{- if rne (index $op.Outputs 0).Type (bytestream) -}}
                    if firstWrite {
                {{- else -}}
                    if w.wrote {
                {{- end -}}
            {{end -}}
            {{- if (ne (len $op.Errors) 0)}}
                switch e := err.(type) {
                    {{- range $op.Errors}}
                        case {{.}}:
                            e.ServeHTTP(w, r)
                    {{- end}}
                default:
                    rpcError{
                        Message: err.Error(),
                        Code: http.StatusInternalServerError,
                    }.ServeHTTP(w, r)
                }
                return
            {{else}}
                rpcError{
                    Message: err.Error(),
                    Code: http.StatusInternalServerError,
                }.ServeHTTP(w, r)
                return
            {{end -}}
            {{if (outstream $op) -}}
                } else {
                    // there is no way to propogate the error
                    // instead, an incomplete response is returned
                    {{if rne (index $op.Outputs 0).Type (bytestream) -}}
                        bufw.Flush()
                    {{- end}}
                    return
                }
            {{- end -}}
        }

        {{if not (outstream $op) -}}
            json.NewEncoder(w).Encode(outputs)
        {{- else if rne (index $op.Outputs 0).Type (bytestream) -}}
            endWrite()
        {{- end}}
    }
{{end}}

// ServeHTTP invokes the appropriate handler
func (h http{{.Name}}Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    h.mux.ServeHTTP(w, r)
}

// NewHTTP{{.Name}}Handler creates an http.Handler that wraps a {{.Name}}.
// If not nil, ctxTransform will be called to transform the context with information from the HTTP request.
// If the ctxTransform returns an error, the error will be propogated to the client.
// The cancel function returned by ctxTransform will be invoked after the request completes.
func NewHTTP{{.Name}}Handler(system {{.Name}}, ctxTransform func(context.Context, *http.Request) (context.Context, context.CancelFunc, error)) http.Handler {
    mux := http.NewServeMux()
    h := &http{{.Name}}Handler{
        impl: system,
        ctxTransform: ctxTransform,
        mux: mux,
    }
    {{range .Operations}}
        mux.HandleFunc({{printf "%q" (printf "/%s" .Path)}}, h.handle{{.Name}})
    {{- end}}

    return h
}

// {{.Name}}Client is an HTTP client for {{.Name}}, implementing {{.Name}}.
type {{.Name}}Client struct {
    // HTTP is the HTTP client which will be used by the {{.Name}}Client to make requests.
    HTTP *http.Client

    // Base is the base URL of the server.
    Base *url.URL

    // Contextualize is an optional callback that may be used to add contextual information to the HTTP request.
    // If Contextualize is not called, the parent context will be inserted into the request.
    // If present, the Contextualize callback is responsible for configuring request cancellation.
    Contextualize func(context.Context, *http.Request) (*http.Request, error)
}

{{range $i, $op := .Operations}}
    {{range (lines $op.Description) -}}
    // {{.}}
    {{end -}}

    {{- range $op.Inputs -}}
        {{- range (lines .Description) -}}
        // {{.}}
        {{end}}
    {{- end -}}
    {{- range $op.Outputs -}}
        {{- range (lines .Description) -}}
        // {{.}}
        {{end}}
    {{- end -}}

    {{- if (ne (len $op.Errors) 0) -}}
        // May return{{range $op.Errors}} {{.}}{{end}}.
    {{end -}}

    func (cli *{{$sysName}}Client) {{$op.Name}}(ctx context.Context,
            {{- if instream . -}}
                {{- if req (index .Inputs 0).Type (bytestream) -}}
                    in io.Reader
                {{- else -}}
                    in func() ({{(index .Inputs 0).Type.Elem}}, error)
                {{- end}},
            {{- else -}}
                {{- range .Inputs -}}
                    {{.Name}} {{.Type.GoType}},
                {{- end -}}
            {{end -}}
            {{- if outstream .}}
                {{- if req (index .Outputs 0).Type (bytestream) -}}
                    out io.Writer
                {{- else -}}
                    out func({{(index .Outputs 0).Type.Elem}}) error
                {{- end}},
            {{end -}}
        )
        {{- if and (not (outstream .)) (ne (len .Outputs) 0) -}}
            (
                {{- range .Outputs -}}
                    {{.Type.GoType}},
                {{- end -}}
            error)
        {{- else -}}
            error
        {{- end -}} {
            u, err := cli.Base.Parse({{printf "%q" $op.Path}})
            if err != nil {
                return {{if not (outstream $op) -}}
                    {{range $op.Outputs -}}
                        {{gozero .Type}},
                    {{- end}}
                {{- end -}} err
            }
            {{if instream $op}}
                {{if req (index .Inputs 0).Type (bytestream)}}
                    req, err := http.NewRequest({{gohttpmethod $op.Method}}, u.String(), in)
                    if err != nil {
                        return {{if not (outstream $op) -}}
                            {{range $op.Outputs -}}
                                {{gozero .Type}},
                            {{- end}}
                        {{- end -}} err
                    }
                {{else}}
                    ipr, ipw := io.Pipe()
                    var wg sync.WaitGroup
                    defer wg.Wait()
                    wg.Add(1)
                    go func() {
                        defer wg.Done()
                        defer ipw.Close()
                        bufw := bufio.NewWriter(ipw)
                        if err := bufw.WriteByte('['); err != nil {
                            ipw.CloseWithError(err)
                            return
                        }
                        je := json.NewEncoder(bufw)
                        first := true
                        for {
                            elem, err := in()
                            if err != nil {
                                if err == io.EOF {
                                    if err = bufw.WriteByte(']'); err != nil {
                                        ipw.CloseWithError(err)
                                        return
                                    }
                                    if err = bufw.Flush(); err != nil {
                                        ipw.CloseWithError(err)
                                        return
                                    }
                                    return
                                }
                                ipw.CloseWithError(err)
                                return
                            }
                            if first {
                                first = false
                            } else {
                                if err = bufw.WriteByte(','); err != nil {
                                    ipw.CloseWithError(err)
                                    return
                                }
                            }
                            err = je.Encode(elem)
                            if err != nil {
                                ipw.CloseWithError(err)
                                return
                            }
                        }
                    }()
                    defer ipr.Close()
                    req, err := http.NewRequest({{gohttpmethod $op.Method}}, u.String(), ipr)
                    if err != nil {
                        return {{if not (outstream $op) -}}
                            {{range $op.Outputs -}}
                                {{gozero .Type}},
                            {{- end}}
                        {{- end -}} err
                    }
                {{end}}
            {{else if (eq $op.ArgEncoding "json")}}
                dat, err := json.Marshal(struct {
                    {{- range $op.Inputs}}
                        {{.Name}} {{.Type.GoType}} `json:"{{.Name}},omitempty"`
                    {{- end -}}
                }{
                    {{- range $op.Inputs}}
                        {{.Name}}: {{.Name}},
                    {{- end}}
                })
                if err != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} err
                }
                req, err := http.NewRequest({{gohttpmethod $op.Method}}, u.String(), bytes.NewReader(dat))
                if err != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} err
                }
            {{else if (eq $op.ArgEncoding "query")}}
                q := u.Query()
                {{- range $op.Inputs}}
                    raw{{.Name}}, err := json.Marshal({{.Name}}) {{/* TODO: optimize to simple calls (e.g. strconv.Itoa) */}}
                    if err != nil {
                        return {{if not (outstream $op) -}}
                            {{range $op.Outputs -}}
                                {{gozero .Type}},
                            {{- end}}
                        {{- end -}} err
                    }
                    q.Set({{printf "%q" .Name}}, string(raw{{.Name}}))
                {{- end}}
                u.RawQuery = q.Encode()

                req, err := http.NewRequest({{gohttpmethod $op.Method}}, u.String(), nil)
                if err != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} err
                }
            {{else}}
                req, err := http.NewRequest({{gohttpmethod $op.Method}}, u.String(), nil)
                if err != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} err
                }
            {{end -}}

            if cli.Contextualize == nil {
                req = req.WithContext(ctx)
            } else {
                cctx, cancel := context.WithCancel(ctx)
                defer cancel()

                req, err = cli.Contextualize(cctx, req)
                if err != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} err
                }
            }

            hcl := cli.HTTP
            if hcl == nil {
                hcl = http.DefaultClient
            }
            resp, err := hcl.Do(req)
            if err != nil {
                return {{if not (outstream $op) -}}
                    {{range $op.Outputs -}}
                        {{gozero .Type}},
                    {{- end}}
                {{- end -}} err
            }
            defer resp.Body.Close()

            if resp.StatusCode != http.StatusOK {
                dat, eerr := ioutil.ReadAll(resp.Body)
                if eerr != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} errors.New(resp.Status)
                }
                var rerr rpcError
                eerr = json.Unmarshal(dat, &rerr)
                if eerr != nil {
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} errors.New(string(dat))
                }
                {{if (ne (len $op.Errors) 0)}}
                    rmsg := rerr.Message
                    switch rerr.Type {
                    {{- range $op.Errors}}
                    case {{printf "%q" .}}:
                        rerr.Data = &{{.}}{}
                    {{end -}}
                    default:
                        return {{if not (outstream $op) -}}
                            {{range $op.Outputs -}}
                                {{gozero .Type}},
                            {{- end}}
                        {{- end -}} errors.New(rmsg)
                    }
                    eerr = json.Unmarshal(dat, &rerr)
                    if eerr != nil {
                        return {{if not (outstream $op) -}}
                            {{range $op.Outputs -}}
                                {{gozero .Type}},
                            {{- end}}
                        {{- end -}} errors.New(rmsg)
                    }
                    decerr, ok := rerr.Data.(error)
                    if !ok {
                        return {{if not (outstream $op) -}}
                            {{range $op.Outputs -}}
                                {{gozero .Type}},
                            {{- end}}
                        {{- end -}} errors.New(rmsg)
                    }
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} decerr
                {{else}}
                    return {{if not (outstream $op) -}}
                        {{range $op.Outputs -}}
                            {{gozero .Type}},
                        {{- end}}
                    {{- end -}} errors.New(rerr.Message)
                {{end -}}
            }

            {{if outstream $op}}
                {{if req (index .Outputs 0).Type (bytestream)}}
                    _, err = io.Copy(out, resp.Body)
                    if err != nil {
                        return err
                    }
                    return nil
                {{else}}
                    jd := json.NewDecoder(resp.Body)
                    brack, err := jd.Token()
                    if err != nil {
                        if err == io.EOF {
                            err = io.ErrUnexpectedEOF
                        }
                        return err
                    }
                    if brack != json.Delim('[') {
                        return fmt.Errorf("expected '[' opening stream JSON but got %q (%T)", brack, brack)
                    }
                    for jd.More() {
                        var elem {{(index .Inputs 0).Type}}
                        err = jd.Decode(&elem)
                        if err != nil {
                            return err
                        }
                        err = out(elem)
                        if err != nil {
                            return err
                        }
                    }
                    brack, err = jd.Token()
                    if err != nil {
                        if err == io.EOF {
                            err = io.ErrUnexpectedEOF
                        }
                        return err
                    }
                    if brack != json.Delim(']') {
                        return fmt.Errorf("expected ']' closing stream JSON but got %q (%T)", brack, brack)
                    }
                    return nil
                {{end}}
            {{else if (ne (len $op.Outputs) 0)}}
                bdat, err := ioutil.ReadAll(resp.Body)
                if err != nil {
                    return {{range $op.Outputs}}{{gozero .Type}}, {{end}}err
                }

                var outputs struct {
                    {{- range $op.Outputs}}
                        {{.Name}} {{.Type.GoType}} `json:"{{.Name}},omitempty"`
                    {{- end}}
                }
                err = json.Unmarshal(bdat, &outputs)
                if err != nil {
                    return {{range $op.Outputs}}{{gozero .Type}}, {{end}}err
                }

                return {{range $op.Outputs}}outputs.{{.Name}}, {{end}}nil
            {{else}}
                return nil
            {{end -}}
    }
{{end}}
