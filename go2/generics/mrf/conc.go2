package mrf

import (
	"sync"
	"io"
)

type concMapV(type O) struct {
	val O
	err error
}

type concMapRes(type I, O) struct {
	wg sync.WaitGroup
	sema, maxConc uint
	eof bool

	res chan concMapV(O)

	in Stream(I)
	op MapFunc(I, O)
}

func (cmr *concMapRes(I, O)) run(in I) {
	defer cmr.wg.Wait()
	out, err := cmr.op(in)
	if err != nil {
		cmr.res <- concMapV(O){err: err}
		return
	}
	cmr.res <- concMapV(O){val: out}
}

func (cmr *concMapRes(I, O)) Next() (O, error) {
	for cmr.sema < cmr.maxConc && !cmr.eof {
		v, err := cmr.in.Next()
		if err != nil {
			defer cmr.wg.Wait()
			if err == io.EOF {
				cmr.eof = true
				break
			}
			var zero O
			return zero, err
		}
		sema++
		cmr.wg.Add(1)
		go cmr.run(v)
	}
	for res := range cmr.res {
		sema--
		if res.err != nil {
			defer cmr.wg.Wait()
			var zero O
			return zero, res.err
		}
		return res.val, nil
	}
	defer cmr.wg.Wait()
	return nil, io.EOF
}

// ConcMap takes a stream and a function, and returns a Stream of values transformed by the function.
// Unlike Map, the mapping is done concurrently and order is not preserved.
// If conc is 0 or 1, this is equivalent to calling Map.
func ConcMap (type I, O) (in Stream(I), conc uint, fn MapFunc(I, O)) Stream(O) {
	if conc <= 1 {
		return Map(I, O)(in, fn)
	}
	return &concMapRes(I, O){
		maxConc: conc,
		res: make(chan concMapV(O), conc),
		in: in,
		op: fn,
	}
}

// ReduceAll reduces each stream, then reduces the results of the reductions together.
// If conc is greater than 1, conc streams will be reduced concurrently.
func ReduceAll (type E) (in Stream(Stream(E)), conc uint, fn ReduceFunc(E)) (E, error) {
	return Reduce(E)(
		ConcMap(Stream(E), E)(in, conc, func(s Stream(E)) (E, error) {
			return Reduce(E)(s, fn)
		}),
		fn,
	)
}
