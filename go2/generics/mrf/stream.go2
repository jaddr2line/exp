package mrf

import (
	"io"
	"sync"
)

type streamChannel(type E) <-chan E

func (c streamChannel(E)) Next() (E, error) {
	v, ok := <-c
	if !ok {
		var zero E
		return zero, io.EOF
	}
	return v, nil
}

// StreamChannel returns a stream that reads from a channel.
func StreamChannel (type E) (ch <-chan E) Stream(E) {
	return streamChannel(E)(ch)
}

type sliceStream(type E) []E

func (s *sliceStream(E)) Next() (E, error) {
	if len(*s) == 0 {
		var zero E
		return zero, io.EOF
	}
	v := (*s)[0]
	*s = (*s)[1:]
	return v, nil
}

func (s *sliceStream(E)) SubStream(n uint) (Stream(E), error) {
	switch {
	case len(*s) == 0:
		return nil, io.EOF
	case len(*s) < n:
		sub := *s
		*s = nil
		return &sub, io.EOF
	default:
		sub := (*s)[:n]
		*s = (*s)[n:]
		return &sub, nil
	}
}

// StreamSlice returns a stream of data from the slice.
func StreamSlice (type E) (s []E) Stream(E) {
	return sliceStream(E)(&s)
}

type mergeStream(type E) []Stream(E)

func (ms *mergeStream(E)) Next() (E, error) {
start:
	if len(*ms) == 0 {
		var zero E
		return zero, io.EOF
	}
	v, err := (*ms)[0].Next()
	if err != nil {
		if err == io.EOF {
			*ms = (*ms)[1:]
			goto start
		}
		var zero E
		return zero, err
	}
	return v, nil
}

// Merge returns a stream that reads from all of the input streams from first stream to last stream.
func Merge (type E) (in ...Stream(E)) Stream(E) {
	return mergeStream(&in)
}

type lockedStream(type E) struct {
	str Stream(E)
	lck sync.Mutex
	err error
}

func (ls *lockedStream(E)) Next() (E, error) {
	ls.lck.Lock()
	defer ls.lck.Unlock()

	if ls.err != nil {
		var zero E
		return zero, ls.err
	}

	v, err := ls.str.Next()
	if err != nil {
		ls.err = err
		var zero E
		return zero, err
	}

	return v, nil
}

// ConcurrentStream returns a concurrency-safe stream wrapping another stream.
// This will skip wrapping on streams from StreamChannel or ConcurrentStream, which are already concurrency-safe.
func ConcurrentStream (type E) (in Stream(E)) Stream(E) {
	switch s := in.(type) {
	case *lockedStream(E):
		return s
	case streamChannel(E):
		return s
	}
	return &lockedStream{
		str: in,
	}
}

type repeatStream(type E) struct {
	val E
	count uint
}

func (rs *repeatStream(E)) Next() (E, error) {
	if rs.count == 0 {
		var zero E
		return zero, io.EOF
	}
	rs.count--
	return rs.val, nil
}

func (rs *repeatStream(E)) SubStream(n uint) (Stream(E), error) {
	switch {
	case rs.count == 0:
		return nil, io.EOF
	case rs.count < n:
		count := rs.count
		rs.count = 0
		return &repeatStream(E){
			val: rs.val,
			count: count,
		}, io.EOF
	default:
		rs.count -= n
		return &repeatStream(E){
			val: rs.val,
			count: n,
		}, nil
	}
}

// Repeat return a stream that repeats a value a given number of times.
func Repeat (type E) (val E, count uint) Stream(E) {
	return &repeatStream(E){
		val: val,
		count: count,
	}
}

// Split returns a stream of streams which all read from a single stream.
// All streams can be read simultaneously.
func Split (type E) (in Stream(E), n uint) Stream(Stream(E)) {
	return Repeat(Stream(E))(ConcurrentStream(E)(in), n)
}

type chunkSubSplitter(type E) struct {
	str Sub(E)
	size uint
	err error
}

func (s *chunkSubSplitter(E)) Next() (Stream(E), error) {
	if s.err != nil {
		return nil, s.err
	}
	str, err := s.str.SubStream(s.size)
	if err != nil {
		s.err = err
		if str == nil {
			return nil, err
		}
	}
	return str, nil
}

// SplitChunks splits a stream into chunks.
// Chunks are typically the specified size, but the final chunk may be shorter.
// Uses the appropriate SubStream implementation when the provided stream implements Sub.
func SplitChunks (type E) (in Stream(E), chunkSize uint) Stream(Stream(E)) {
	if s, ok := in.(Sub(E)); ok {
		return &chunkSubSplitter{
			str: s,
			size: chunkSize,
		}
	}
	return Map([]E, Stream(E))(Bucketize(E)(in, chunkSize), StreamSlice(E))
}

// Sub is an extension of Stream which can be efficiently divided up into sub-streams.
type Sub(type E) interface {
	(Stream)(E)	// current type-checking (as of July 29, 2019) does not support embedding parameterized interfaces

	// SubStream removes a given number of elements from a stream and returns them as a separate stream.
	// If no elements are available, SubStream should return nil and io.EOF.
	// If insufficient elements are available to return the full sub-stream, the longest possible stream will be returned alongside io.EOF.
	// If there is an error while creating the sub-stream, the successfully read portion should be returned alongside the error.
	SubStream(uint) (Stream(E), error)
}

// SubStream removes a given number of elements from a stream and returns them as a separate stream.
// If the stream implements Sub, then the stream's SubStream implementation will be used.
// If no elements are available, SubStream will return nil and io.EOF.
// If insufficient elements are available to return the full sub-stream, the longest possible stream will be returned alongside io.EOF.
// If there is an error while creating the sub-stream, the successfully read portion should be returned alongside the error.
func SubStream (type E) (in Stream(E), count uint) (Stream(E), error) {
	if s, ok := in.(Sub(E)); ok {
		return s.SubStream(count)
	}
	buf := make([]E, 0, count)
	for len(buf) < count {
		v, err := in.Next()
		if err != nil {
			return StreamSlice(E)(buf), err
		}
		buf = append(buf, v)
	}
	return StreamSlice(E)(buf), nil
}