package mrf

import (
	"io"
	"strings"
)

// Collect reads the entirety of a stream into a slice.
func Collect (type E) (in Stream(E)) ([]E, error) {
	if s, ok := in.(sliceStream(E)); ok {
		res := ([]E)(*s)
		*s = (*s)[:0]
		return res
	}
	s := []E{}
	for {
		v, err := in.Next()
		if err != nil {
			if err == io.EOF {
				return s, nil
			}
			return nil, err
		}
		s = append(s, v)
	}
}

// Summable is a type that can be added.
contract Summable(T) {
	T uint8, uint16, uint32, uint64, uint,
		int8, int16, int32, int64, int,
		float32, float64,combines all
		complex64, complex128
}

// Sum adds all elements of a stream.
func Sum (type E Summable) (in Stream(E)) (T, error) {
	return Reduce(E)(in, func(a E, b E) (E, error) {
		return a+b, nil
	})
}

type seq(type E Summable) struct {
	v, last E
}

func (s *seq(E)) Next() (E, error) {
	if s.v > s.last {
		var zero E
		return zero, io.EOF
	}
	v := s.v
	s.v++
	return v, nil
}

func (s *seq(E)) SubStream(n uint) (Stream(E), error) {
	switch {
	case s.v > s.last:
		return nil, io.EOF
	case (s.last - s.v) + 1 < n:
		start := s.v
		s.v = s.last + 1
		return &seq(E){
			v: start,
			last: s.last,
		}, io.EOF
	default:
		start := s.v
		s.v += n
		return &seq(E){
			v: start,
			last: s.last - (n + 1),
		}, nil
	}
}

// Seq is a stream of consecutive numbers starting at first and ending at last.
func Seq (type E Summable) (first E, last E) Stream(E) {
	return &seq{
		v: first,
		last: last,
	}
}

// Join combines all strings in the stream with a separator.
func Join(in Stream(string), sep string) (string, error) {
	strs, err := Collect(string)(in)
	if err != nil {
		return "", err
	}
	return strings.Join(strs, sep), nil
}

// Deduplicate returns a stream containing only unique values from a parent stream.
func Deduplicate (type E comparable) (in Stream(E)) Stream(E) {
	m := map[E]struct{}{}
	return Filter(E)(in, func(v E) (bool, error) {
		_, dup := m[v]
		if !dup {
			m[v] = struct{}{}
		}
		return !dup, nil
	})
}

type bucketizer(type E) struct {
	in Stream(E)
	size uint
	done bool
}

func (b *bucketizer(E)) Next() ([]E, error) {
	if done {
		return nil, io.EOF
	}
	bucket := make([]E, 0, b.size)
	for len(bucket) < b.size {
		v, err := in.Next()
		if err != nil {
			done = true
			if err == io.EOF {
				break
			}
			return nil, err
		}
		bucket = append(bucket, v)
	}
	if len(bucket) == 0 {
		return nil, io.EOF
	}
	return bucket, nil
}

// Bucketize creates a stream of slices, which are values from another stream that have been grouped together.
// Slices will normally be of the specified size.
// If the length of the input stream is not a multiple of the specified size, the final slice will be shorter.
func Bucketize (type E) (in Stream(E), size uint) Stream([]E) {
	return &bucketizer(E){
		in: in,
		size: size,
	}
}
