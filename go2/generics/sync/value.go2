package sync

import (
	"sync/atomic"
	"unsafe"
)

// Value is an atomic storage bucket.
type Value(type T) struct {
     // top bit is buffer select, below is write lock, then below is read lock counter
     state uint32

     // two buffers for storing values
     // one can be read from while the other is written to
     buffers [2]T
}

// Store places the value into storage, overriding any previous value.
func (val *Value(T)) Store(v T) {
     // acquire write lock
     for state := atomic.LoadUint32(&val.state); !atomic.CompareAndSwapUint32(&val.state, state &^ (1 << 30), state | (1 << 30)); state = atomic.LoadUint32(&val.state) {
         // keep retrying until we have a write lock
     }

     // get active and inactive buffers
     active := atomic.LoadUint32(&val.state) >> 31
     inactive := 1 - active

     // store value into inactive buffer
     val.buffers[inactive] = v

     // swap buffers when all readers depart and clear the write lock
     readyState := (active << 31) | (1 << 30)
     newState := inactive << 31
     for !atomic.CompareAndSwapUint32(&val.state, readyState, newState) {
         // not ready yet
     }
}

// Load loads a value from storage.
func (val *Value(T)) Load() T {
     // acquire read lock and get buffer
     buf := atomic.AddUint32(&val.state, 1) & (1 << 31)

     // read value
     v := val.buffers[buf]

     // release read lock
     atomic.AddUint32(&val.state, 0xffffffff)

     return v
}
