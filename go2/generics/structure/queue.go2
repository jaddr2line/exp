package structure

// Queue is a mechanism for placing and removing items in a specific order.
type Queue(type E) interface {
     // Push an item onto the queue.
     Push(E)

     // Pop an item off of the queue.
     // Returns false if there are no items to remove.
     Pop() (E, bool)
}

// SliceQueue is a queue implementation backed by a slice.
type SliceQueue(type E) []E

// Push an element onto the queue by appending it to the slice.
func (q *SliceQueue(E)) Push(e E) {
     *q = append(*q, e)
}

// Pop an element from the queue by slicing off the first element.
func (q *SliceQueue(E)) Pop() (E, bool) {
     if len(*q) < 1 {
        var zero E
        return zero, false
     }

     val := (*q)[0]
     *q = (*q)[:len(*q) - 1]

     return val, true
}

type link(type E) struct {
     val E
     prev, next *link(E)
}

// LinkedQueue is a queue implemented as a linked list.
type LinkedQueue struct {
     start, end *link(E)
}

func (q *LinkedQueue(E)) Push(e E) {
     q.start = &link(E) {
             val: e,
             next: q.start,
     }
     if q.start.next != nil {
        q.start.next.prev = q.start
     }

     if q.end == nil {
        q.end = q.start
     }
}

func (q *LinkedQueue(E)) Pop() (E, bool) {
     if q.end == nil {
        var zero E
        return zero, false
     }

     v := q.end.val

     if q.end == q.start {
        q.start = nil
     } else {
       q.end.prev.next = nil
     }

     q.end = q.end.prev

     return v, true
}

// ChanQueue is a concurrency-safe queue backed by a channel.
type ChanQueue(type E) chan E

// Put sends an element to the channel, blocking until space or recievers are available.
func (q ChanQueue(E)) Put(e E) {
     q <- e
}

// Pop recieves an element from the channel, blocking until an element is available or the channel is closed.
func (q ChanQueue(E)) Pop() (E, bool) {
     v, ok := <-q
     return v, ok
}
