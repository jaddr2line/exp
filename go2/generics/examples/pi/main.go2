package main

import (
	"fmt"
	"runtime"
	"github.com/niaow/exp/go2/generics/mrf"
)

func add (type T mrf.Summable) (x T, y T) (T, error) {
	return x+y, nil
}

func main() {
	// math:
	//	A circle of radius 1 can be described by the equation x^2 + y^2 = 1.
	//	Rearranging, we get y = ±√(1 - x^2).
	//	The double integral for area is therefore A = ∫(-1, 1)(∫(-√(1 - x^2), √(1 - x^2))(1)dy)dx.
	//	This can be simplified to A = ∫(0, 1)(4*√(1 - x^2))dx.
	//	The conventional formula for area is A = π * r^2.
	//	Plugging in r=1 and substituting, we find that π = ∫(0, 1)(4*√(1 - x^2))dx.
	//	This code approximates π with a Left Riemann Sum of this integral.
	// For those who don't know calculus: we are approximating the area of a circle by creating tons of skinny rectangles extending from the x axis to points on the circle and adding their areas.
	//	√(1 - x^2) = y coordinate of point on the circle
	//	dx = width of rectangle
	//	√(1 - x^2) * dx = area of rectangle
	//	area of rectangle multiplied by 4 because we are using a quarter circle

	// number of rectangles
	n := uint32(4000000000)

	// size of a chunk (for splitting up work)
	chunkSize := uint(64*1024)

	// width or rectangle
	dx := 1 / float64(n)

	// get a sequence of unscaled x coordinates
	seq := mrf.Seq(uint32)(0, n-1)

	// break sequence into chunks that can be processed separately
	chunks := mrf.SplitChunks(seq, chunkSize)

	// map sequence streams to result streams
	resChunks := mrf.Map(chunks, func(in mrf.Stream(uint32)) (mrf.Stream(float64), error) {
		// scale [0, n-1] to [0, 1)
		scaled := mrf.Map(in, func(x uint32) (float64, error) {
			return float64(x)*dx
		})

		// map x coordinate to rectangle area
		integrand := mrf.Map(scaled, func(x float64) (float64, error) {
			return 4 * math.Sqrt(1 - (x*x)) * dx, nil
		})
	})

	// use up to 2 goroutines per CPU
	conc := 2 * uint(runtime.NumCPU())

	// reduce, and actually run all of the math
	pi, err := mrf.ReduceAll(resChunks, conc, add(float64))
	if err != nil {
		panic(err)
	}

	// print result
	fmt.Printf("pi = %f\n", pi)
}
