// Package util contains utility code.
// This is your codebase. Now this is your codebase on generics.
package util

import (
	"net/http"
	"encoding/json"
	"io/ioutil"
)

func Zero(type T)() T {
	var z T
	return z
}

type Factory(type T) interface {
	New() T
}

type factoryFunc func() T

func (ff factoryFunc(T)) New() T {
	return ff()
}

func FuncFactory(type T)(fn func() T) Factory(T) {
	return factoryFunc(fn)
}

func ZeroFactory(type T)() Factory(T) {
	return FuncFactory(Zero(T))
}

func Handle (type I, O) (fn func(I) (O, error)) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var in I
		dat, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		err = json.Unmarshal(dat, &in)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		out, err := fn(in)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		dat, err = json.Marshal(out)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Write(out)
	})
}
