// Package util contains utility code.
// This is your codebase. Now this is your codebase on generics.
package util

import (
	"net/http"
	"encoding/json"
	"io/ioutil"
)


type Newer(type T) interface {
	New() T
}

type newFunc(type T) func() T

func (nf newFunc(T)) New() T {
	return nf()
}

func FuncNewer(type T)(fn func() T) Newer(T) {
	return newFunc(T)(fn)
}

func Zero(type T)() Newer(T) {
	return FuncNewer(T)(func() T {
		var z T
		return z
	})
}

func Handle (type I, O) (fn func(I) (O, error)) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var in I
		dat, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		err = json.Unmarshal(dat, &in)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		out, err := fn(in)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		dat, err = json.Marshal(out)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Write(out)
	})
}
