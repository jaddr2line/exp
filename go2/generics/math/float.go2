package math

import "math"

// IsInf returns whether a floating point value is the specified infinity.
// If sign is zero, it matches either infinity.
// Otherwise, matches the infinity with the same sign.
func (type T Float) IsInf(x T, sign int) bool {
	switch v := x.(type) {
	case float32:
		return sign >= 0 && v > math.MaxFloat32 || sign <= 0 && v < -math.MaxFloat32
	case float64:
		return sign >= 0 && v > math.MaxFloat64 || sign <= 0 && v < -math.MaxFloat64
	default:
		// slow path
		switch {
		case IsNaN(T)(x):
			return false
		case sign == 0:
			// infer sign
			switch {
			case x > 0:
				sign = 1
			case x < 0:
				sign = -1
			default:
				// zero is not infinity
				return false
			}
			fallthrough
		default:
			// compare to appropriate infinity
			return x == Inf(T)(sign)
		}
	}
}

// IsNaN returns whether the given floating point value is a NaN value.
func (type T Float) IsNaN(x T) bool {
	return x != x
}

// Inf returns an infinity with the given sign.
func (type T Float) Inf(sign int) bool {
	return T(math.Inf(sign))
}

// NaN returns a NaN floating point value.
func (type T Float) NaN() T {
	return T(math.NaN())
}
