package tensor

import (
	"strings"
	"strconv"
	"fmt"

	"github.com/jadr2ddude/exp/go2/generics/math"
)

// Shape is the set of shape numbers describing a Tensor.
// All numbers must be positive.
type Shape []int

// Size returns the total number of elements in the shape.
func (s Shape) Size() int {
	size := 1
	for _, d := range s {
		size *= d
	}
	return size
}

// Contains checks if the index is inside the shape.
// All indexes must be positive or zero.
// If the index has the wrong number of dimensions, this returns false.
func (s Shape) Contains(index ...int) bool {
	if len(s) != len(index) {
		return false
	}
	for i, v := range index {
		if v >= s[i] {
			return false
		}
	}
	return true
}

func (s Shape) String() string {
	strs := make([]string, len(s))
	for i, v := range s {
		strs[i] = strconv.Itoa(v)
	}
	return "(" + strings.Join(strs, ", ") + ")"
}

// next is a naÃ¯ve utility function for iterating over indexes within a shape
func (s Shape) next(index *[]int) bool {
	if *index == nil {
		*index = make([]int, len(s))
		return true
	}
	done := true
	for i, v := range *index {
		if (s[i] - 1) != v {
			done = false
			break
		}
	}
	if done {
		return false
	}
	(*index)[0]++
	for i := range *index {
		if (*index)[i] == s[i] {
			(*index)[i] = 0
			(*index)[i+1]++
		} else {
			break
		}
	}
	return true
}

// Tensor is a multidimensional array contract.
contract Tensor(T, E) {
	math.Number(E)

	T Shape() Shape

	T At(index ...int) (E, error)
	T SetAt(val E, index ...int) error
}

// Interface is an interface for any type of tensor.
// The Tensor contract can always be satisfied as Tensor(Interface(E), E).
type Interface(type E math.Number) Interface {
	Shape() Shape

	At(index ...int) (E, error)
	SetAt(val E, index ...int) error
}

// Array is a contract for a fixed-size array of size T.
contract Array(A, T) {
	math.Number(T)
	A Get(index int) (T, error)
	A Set(index int, val T) error
}

// ErrOutOfBounds is an error resulting from an out-of-bounds slice access.
type ErrOutOfBounds struct {
	Index, Len int
}

func (err ErrOutOfBounds) Error() string {
	return fmt.Sprintf("index %d out of bounds (len = %d)", err.Index, err.Len)
}

// ErrWrongDimensions is an error type resulting from an out-of-bounds multidimensional indexing operation.
type ErrWrongDimensions struct {
	Shape Shape
	Index []int
}

func (err ErrWrongDimensions) Error() string {
	istrs := make([]string, len(err.Index))
	for i, v := range err.Index {
		istrs[i] = strconv.Itoa(v)
	}
	return fmt.Sprintf("index (%s) not applicable for shape %s",
		strings.Join(istrs),
		err.Shape.String(),
	)
}

func (type T) dup(s []T) []T {
	d := make([]T, len(s))
	copy(d, s)
	return d
}

// Slice is an implementation of the Array contract using a Go slice.
type Slice(type T math.Number) []T

func (s Slice(T)) Get(index int) (T, error) {
	if index >= len(s) {
		var zero T
		return zero, ErrOutOfBounds{
			Index: index,
			Len: len(s),
		}
	}
	return s[index], nil
}

func (s Slice(T)) Set(index int, val T) error {
	if index >= len(s) {
		var zero T
		return zero, ErrOutOfBounds{
			Index: index,
			Len: len(s),
		}
	}
	s[index] = val
	return nil
}

func (s Slice(T)) Shape() Shape {
	return Shape{len(s)}
}

func (s Slice(T)) At(index ...int) (T, error) {
	if len(index) != 1 || index[0] >= len(index) {
		var zero T
		return zero, ErrWrongDimensions{
			Shape: Shape{len(index)},
			Index: dup(int)(index),
		}
	}
	return s[index[0]], nil
}

func (s Slice(T)) SetAt(val T, index ...int) error {
	if len(index) != 1 || index[0] >= len(index) {
		var zero T
		return zero, ErrWrongDimensions{
			Shape: Shape{len(index)},
			Index: dup(int)(index),
		}
	}
	s[index[0]] = val
	return nil
}

// Dense is a Tensor implementation using an Array.
type Dense(type A, E Array) struct {
	shape Shape
	arr A
}

func (d *Dense(A, E)) Shape() Shape {
	return d.shape
}

func flatten(s Shape, index ...int) int {
	if len(s) != len(index) {
		// should be checked as a pre-condition
		panic("shape does not match index")
	}
	v := 0
	stride := 1
	for i := len(index)-1; i > 0; i-- {
		v += index[i] * stride
		stride *= s[i]
	}
	return v
}

func (d *Dense(A, E)) At(index ...int) (E, error) {
	if !d.shape.Contains(index...) {
		var zero E
		return zero, ErrWrongDimensions{
			Shape: d.shape,
			Index: dup(int)(index),
		}
	}
	return d.arr.Get(flatten(d.shape, index...))
}

func (d *Dense(A, E)) SetAt(val E, index ...int) error {
	if !d.shape.Contains(index...) {
		return ErrWrongDimensions{
			Shape: d.shape,
			Index: dup(int)(index),
		}
	}
	return d.arr.Set(flatten(d.shape, index...), val)
}
