package tensor

// MapFunc is a function that maps things.
type MapFunc(type From, To) func(From) (To, error)

// MapAt is an interface that allows for in-place mapping.
type MapperAt(type E) interface {
	MapAt(fn MapFunc(E, E), index ...int) error
}

// MapAt transforms an element of a tensor with a mapping function.
func MapAt (type T, E Tensor) (tensor T, fn MapFunc(E, E), index ...int) error {
	if mt, ok := tensor.(MapperAt(E)); ok {
		return mt.MapAt(fn, index...)
	}
	v, err := tensor.At(index...)
	if err != nil {
		return err
	}
	return tensor.SetAt(v, index...)
}

// Map is an interface that allows for in-place mapping of all elements.
type Mapper(type E) interface {
	Map(fn MapFunc(E, E)) error
}

// Map applies a map function to replace all elements of a tensor.
func Map (type T, E Tensor) (tensor T, fn MapFunc(E, E)) error {
	switch t := tensor.(type) {
	case Mapper(E):
		return t.Map(fn)
	case MapperAt(E):
		shape := tensor.Shape()
		var index []int
		for shape.next(&index) {
			err := t.MapAt(fn, ...index)
			if err != nil {
				return err
			}
		}
		return nil
	default:
		shape := tensor.Shape()
		var index []int
		for shape.next(&index) {
			v, err := tensor.At(index...)
			if err != nil {
				return err
			}
			err = tensor.SetAt(v, index...)
			if err != nil {
				return err
			}
		}
		return nil
	}
}

// Map applies a mapping function to the element at the given index.
// This replaces the element in place.
// The array index calculation is only preformed once, unlike using At and SetAt.
func (d *Dense(A, E)) MapAt(fn MapFunc(E, E), index ...int) error {
	if !d.shape.Contains(index...) {
		return ErrWrongDimensions{
			Shape: d.shape,
			Index: dup(int)(index),
		}
	}
	i := flatten(d.shape, index...)
	v, err := d.arr.Get(i)
	if err != nil {
		return err
	}
	v, err = fn(v)
	if err != nil {
		return err
	}
	return d.arr.Set(i, v)
}

// Map applies a mapping function to all elements of the tensor, replacing them in-place.
func (d *Dense(A, E)) Map(fn MapFunc(E, E)) error {
	if s, ok := d.arr.(Slice(E)); ok {
		for i, v := range s {
			m, err := fn(v)
			if err != nil {
				return err
			}
			s[i] = m
		}
		return nil
	}
	n := d.shape.Size()
	for i := 0; i < n; i++ {
		v, err := d.arr.Get(i)
		if err != nil {
			return err
		}
		v, err = fn(v)
		if err != nil {
			return err
		}
		err = d.arr.Set(i, v)
		if err != nil {
			return err
		}
	}
	return nil
}

func (av arrayVector(A, E)) MapAt(fn MapFunc(E, E), index ...int) error {
	if len(index) != 1 || index[0] >= av.size {
		var zero E
		return zero, ErrWrongDimensions{
			Shape: Shape{av.size},
			Index: dup(int)(index),
		}
	}
	v, err := av.arr.Get(index[0])
	if err != nil {
		return err
	}
	v, err = fn(v)
	if err != nil {
		return err
	}
	return av.arr.Set(index[0], v)
}

func (av arrayVector(A, E)) Map(fn MapFunc(E, E)) error {
	if s, ok := av.arr.(Slice(E)); ok {
		for i, v := range s {
			m, err := fn(v)
			if err != nil {
				return err
			}
			s[i] = m
		}
		return nil
	}
	for i := 0; i < av.size; i++ {
		v, err := av.arr.Get(i)
		if err != nil {
			return err
		}
		v, err = fn(v)
		if err != nil {
			return err
		}
		err = av.arr.Set(i, v)
		if err != nil {
			return err
		}
	}
	return nil
}
