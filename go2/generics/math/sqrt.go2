package math

import (
	"math"

	"github.com/chewxy/math32"
)

// SqrtFloat implements the same behavior as the standard library Sqrt.
// https://golang.org/pkg/math/#Sqrt
func SqrtFloat (type T Float) (x T) T {
	switch v := x.(type) {
	case float64:
		return T(math.Sqrt(v))
	case float32:
		return T(math32.Sqrt(v))
	default:
		return T(SqrtFloat(float64)(float64(x)))
	}
}

// SqrtInt implements an integer square root operation.
// If the input is negative, this will panic.
func SqrtInt (type T Int) (x T) T {
	var res T
	var bit T
	if x < 0 {
		panic(errors.New("square root of negative number"))
	}
	switch x.(type) {
	case uint:
		if uint64(uint(^uint64(0))) == (^uint64(0)) {
			return T(SqrtInt(uint64)(uint64(x)))
		}
		return T(SqrtInt(uint32)(uint32(x)))
	case uint8:
		bit = 1 << (8-1)
	case uint16:
		bit = 1 << (16-1)
	case uint32:
		bit = 1 << (32-1)
	case uint64:
		bit = 1 << (64-1)
	case int:
		return T(SqrtInt(uint)(uint(x)))
	case int8:
		bit = 1 << (8-2)
	case int16:
		bit = 1 << (16-2)
	case int32:
		bit = 1 << (32-2)
	case int64:
		bit = 1 << (64-2)
	default:
		return T(SqrtInt(uint64)(uint64(x)))
	}

	// shamelessly copied from: https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Example_3
	for bit != 0 {
		if (x >= res + bit) {
			x -= res + bit
			res = (res >> 1) + bit
		} else {
			res >>= 1
		}
		bit >>= 2
	}
	return res
}

// SqrtComplex returns the square root of a complex number, with the same rules as "math/cmplx".Sqrt.
func SqrtComplex (type T Complex) (x T) T {
	// I don't understand the stdlib implementation, so I am just wrapping it
	return T(cmplx.Sqrt(complex128(x)))
}

// Sqrt computes the square root of a number.
func Sqrt (type T RegularNumber) (x T) T {
	// from https://play.golang.org/p/vjI7XfNkFgf
	switch v := x.(type) {
	case int:
		return T(SqrtInt(int)(v))
	case int8:
		return T(SqrtInt(int8)(v))
	case int16:
		return T(SqrtInt(int16)(v))
	case int32:
		return T(SqrtInt(int32)(v))
	case int64:
		return T(SqrtInt(int64)(v))
	case uint:
		return T(SqrtInt(uint)(v))
	case uint8:
		return T(SqrtInt(uint8)(v))
	case uint16:
		return T(SqrtInt(uint16)(v))
	case uint32:
		return T(SqrtInt(uint32)(v))
	case uint64:
		return T(SqrtInt(uint64)(v))
	case float32:
		return T(SqrtFloat(float32)(v))
	case float64:
		return T(SqrtFloat(float64)(v))
	default:
		nan := NaN(float64)()
		switch {
		case T(nan) == T(nan):
			if x < 0 {
				return T(SqrtInt(int64)(int64(x)))
			}
			return T(SqrtInt(uint64)(uint64(x)))
		default:
			return T(SqrtFloat(float64)(float64(x)))
		}
	}
}
